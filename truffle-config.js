/**
 * Use this file to configure your truffle project. It's seeded with some
 * common settings for different networks and features like migrations,
 * compilation and testing. Uncomment the ones you need or modify
 * them to suit your project as necessary.
 *
 * More information about configuration can be found at:
 *
 * truffleframework.com/docs/advanced/configuration
 *
 * To deploy via Infura you'll need a wallet provider (like truffle-hdwallet-provider)
 * to sign your transactions before they're sent to a remote public node. Infura accounts
 * are available for free at: infura.io/register.
 *
 * You'll also need a mnemonic - the twelve word phrase the wallet uses to generate
 * public/private key pairs. If you're publishing your code to GitHub make sure you load this
 * phrase from a file you've .gitignored so it doesn't accidentally become public.
 *
 */

// const HDWalletProvider = require('truffle-hdwallet-provider');
// const infuraKey = "fj4jll3k.....";
//
// const fs = require('fs');
// const mnemonic = fs.readFileSync(".secret").toString().trim();

const HDWalletProvider = require('@truffle/hdwallet-provider');
const { readFileSync } = require('fs');
const path = require('path');

module.exports = {
  /**
   * Networks define how you connect to your ethereum client and let you set the
   * defaults web3 uses to send transactions. If you don't specify one truffle
   * will spin up a development blockchain for you on port 9545 when you
   * run `develop` or `test`. You can ask a truffle command to use a specific
   * network from the command line, e.g
   *
   * $ truffle test --network <network-name>
   */

  networks: {
    // Useful for testing. The `development` name is special - truffle uses it by default
    // if it's defined here and no other network is specified at the command line.
    // You should run a client (like ganache-cli, geth or parity) in a separate terminal
    // tab if you use this network and you must also set the `host`, `port` and `network_id`
    // options below to some value.
    //
    // development: {
    //  host: "127.0.0.1",     // Localhost (default: none)
    //  port: 8545,            // Standard Ethereum port (default: none)
    //  network_id: "*",       // Any network (default: none)
    // },
    //Configuration for the Ganache network
    //the command to deploy to the Ganache will looks like
    //truffle migrate --reset --network ganache
    ganache: {
      host: '127.0.0.1',
      port: 7545,
      network_id: '*', // matching any network id
    },

    // Another network with more advanced options...
    // advanced: {
    // port: 8777,             // Custom port
    // network_id: 1342,       // Custom network
    // gas: 8500000,           // Gas sent with each transaction (default: ~6700000)
    // gasPrice: 20000000000,  // 20 gwei (in wei) (default: 100 gwei)
    // from: <address>,        // Account to send txs from (default: accounts[0])
    // websockets: true        // Enable EventEmitter interface for web3 (default: false)
    // },

    // Useful for deploying to a public network.
    // NB: It's important to wrap the provider as a function.
    // ropsten: {
    // provider: () => new HDWalletProvider(mnemonic, `https://ropsten.infura.io/v3/YOUR-PROJECT-ID`),
    // network_id: 3,       // Ropsten's id
    // gas: 5500000,        // Ropsten has a lower block limit than mainnet
    // confirmations: 2,    // # of confs to wait between deployments. (default: 0)
    // timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)
    // skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    // },

    ropsten: {
      provider: () => {
        try {
          const fileContents = readFileSync(path.join(__dirname, 'secret.json'), 'utf8');
          const data = JSON.parse(fileContents);

          const privateKey = data.mnemonic;
          // Your project id, which we copied from Infura.io
          const infuraProjectId = data.infuraProjectToken;
          const rpcUrl = `https://ropsten.infura.io/v3/${infuraProjectId}`;
          const ropstenAccountId = 0;
          /*
          If we skip the last argument in the HDWalletProvider constructor, by default, the account in charge of the smart contract deployment will be the first one generated by the mnemonic. If we pass in a specific index, it'll use that address instead (the index is zero-based).
          */

          // How many addresses in wallet should we unlock?
          // (For deploying test data, we use other addresses as buyers and sellers)
          // Note: This is not used for Mainnet - only for Testnet and local deployment.
          const numAddressesToUnlock = 3;

          console.log('Configuring truffle to use Mnemonic provider for Ropsten.');
          return new HDWalletProvider(privateKey, rpcUrl, ropstenAccountId, numAddressesToUnlock);
        } catch (err) {
          console.error('Error', err);
        }
      },
      network_id: 3, // Ropsten network id

      //Default gas limit in Truffle is 4712388 (gas limit for Homestead release).
      // This exceeds Ropsten's limit. Make sure to set a gas limit to 4700000.
      //Otherwise, you will see the following //error. Error: exceeds block gas limit
      gas: 4700000,
      //gas: 5500000,        // Ropsten has a lower block limit than mainnet
      // confirmations: 2,    // # of confs to wait between deployments. (default: 0)
      // timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)
      // skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    },

    // Useful for private networks
    // private: {
    // provider: () => new HDWalletProvider(mnemonic, `https://network.io`),
    // network_id: 2111,   // This network is yours, in the cloud.
    // production: true    // Treats this network as if it was a public net. (default: false)
    // }
  },

  // Set default mocha options here, use special reporters etc.
  mocha: {
    // timeout: 100000
  },

  // Configure your compilers
  compilers: {
    solc: {
      // version: "0.5.12",    // Fetch exact version from solc-bin (default: truffle's version)
      version: '0.6.0',
      settings: {
        // See the solidity docs for advice about optimization and evmVersion
        optimizer: {
          enabled: true,
        },
        /*
        !!! based on the current Ethereum fork, we now need to set  the EVM version
        https://ethereum.stackexchange.com/questions/78597/solidity-0-6-0-addressthis-balance-throws-error-invalid-opcode
        */
        evmVersion: 'petersburg', //'byzantium'
      },
    },
  },
};
